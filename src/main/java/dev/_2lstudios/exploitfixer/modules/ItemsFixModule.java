package dev._2lstudios.exploitfixer.modules;

import java.util.Collection;
import java.util.List;
import java.util.Map.Entry;

import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BannerMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.EnchantmentStorageMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.LeatherArmorMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;

public class ItemsFixModule implements IModule {
	private final Plugin plugin;
	private boolean enabled;
	private int enchantLimit;
	private int maxStackSize;
	private Collection<String> blacklist;

	public ItemsFixModule(final Plugin plugin) {
		this.plugin = plugin;
	}

	public void reload(final IConfiguration configYml) {
		final String name = getName().toLowerCase();

		this.enabled = configYml.getBoolean(name + ".enabled");
		this.enchantLimit = configYml.getInt(name + ".enchant_limit");
		this.maxStackSize = configYml.getInt(name + ".max_stack_size");
		this.blacklist = configYml.getStringList(name + ".blacklist");
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	public String getName() {
		return "ItemsFix";
	}

	public int getEnchantLimit() {
		return enchantLimit;
	}

	public int getMaxStackSize() {
		return maxStackSize;
	}

	public Collection<String> getBlacklist() {
		return blacklist;
	}

	public ItemStack fixItem(final ItemStack item) {
		final Material material = Material.getMaterial(item.getType().name());
		final ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);
		final short durability = item.getDurability();

		if (item.hasItemMeta()) {
			final ItemMeta oldItemMeta = item.getItemMeta();
			final String displayName = oldItemMeta.getDisplayName();
			final List<String> lore = oldItemMeta.getLore();
			// This applies vanilla levels to enchants
			final boolean applyLevelRestriction = enchantLimit != 0;

			if (oldItemMeta.hasCustomModelData())
				newItemMeta.setCustomModelData(oldItemMeta.getCustomModelData());

			if (oldItemMeta instanceof EnchantmentStorageMeta) {
				final EnchantmentStorageMeta enchantmentStorageMeta = (EnchantmentStorageMeta) oldItemMeta;
				final EnchantmentStorageMeta newEnchantmentStorageMeta = (EnchantmentStorageMeta) newItemMeta;

				for (final Entry<Enchantment, Integer> entry : enchantmentStorageMeta.getStoredEnchants().entrySet()) {
					final Enchantment enchantment = entry.getKey();
					final int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

					if (enchantLimit > -1 && level > -1) {
						newEnchantmentStorageMeta.addStoredEnchant(enchantment, level, !applyLevelRestriction);
					}
				}
			} else {
				for (final Entry<Enchantment, Integer> entry : item.getEnchantments().entrySet()) {
					final Enchantment enchantment = entry.getKey();
					final int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

					if (enchantLimit > -1 && level > -1) {
						newItemMeta.addEnchant(enchantment, level, !applyLevelRestriction);
					}
				}
			}

			if (newItemMeta instanceof BookMeta) {
				final BookMeta oldBookMeta = (BookMeta) oldItemMeta;
				final BookMeta newBookMeta = (BookMeta) newItemMeta;

				newBookMeta.setTitle(oldBookMeta.getTitle());
				newBookMeta.setAuthor(oldBookMeta.getAuthor());
				newBookMeta.setPages(oldBookMeta.getPages());
			} else if (newItemMeta instanceof SkullMeta) {
				final SkullMeta oldSkullMeta = (SkullMeta) oldItemMeta;
				final SkullMeta newSkullMeta = (SkullMeta) newItemMeta;

				newSkullMeta.setOwner(oldSkullMeta.getOwner());
			} else if (newItemMeta instanceof BannerMeta) {
				final BannerMeta oldBannerMeta = (BannerMeta) oldItemMeta;
				final BannerMeta newBannerMeta = (BannerMeta) newItemMeta;

				newBannerMeta.setBaseColor(oldBannerMeta.getBaseColor());
			} else if (newItemMeta instanceof LeatherArmorMeta) {
				final LeatherArmorMeta oldLeatherArmorMeta = (LeatherArmorMeta) oldItemMeta;
				final LeatherArmorMeta newLeatherArmorMeta = (LeatherArmorMeta) newItemMeta;

				newLeatherArmorMeta.setColor(oldLeatherArmorMeta.getColor());
			}

			if (displayName != null && displayName.getBytes().length < 128) {
				newItemMeta.setDisplayName(displayName);
			}

			if (lore != null && lore.toString().getBytes().length < 1024) {
				newItemMeta.setLore(lore);
			}
		}

		if (maxStackSize > 0 && item.getAmount() > maxStackSize) {
			item.setAmount(maxStackSize);
		}

		item.setType(material);
		item.setItemMeta(newItemMeta);
		item.setDurability(durability);

		return item;
	}
}
