package dev._2lstudios.exploitfixer.managers;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import org.bukkit.Server;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.exploit.BukkitExploitPlayer;

public class ExploitPlayerManager {
	private Plugin plugin;
	private Server server;
	private ModuleManager moduleManager;
	private Map<UUID, BukkitExploitPlayer> exploitPlayers = new HashMap<>();

	// Collection of players that closed their inventories
	private Collection<BukkitExploitPlayer> closedInventories = ConcurrentHashMap.newKeySet();

	// Amount of kicked players
	private int kicked = 0;

	// Amount of packets cancelled
	private int packetsCancelled = 0;

	ExploitPlayerManager(Plugin plugin, Server server, ModuleManager moduleManager) {
		this.plugin = plugin;
		this.server = server;
		this.moduleManager = moduleManager;
	}

	public BukkitExploitPlayer getIfPresent(UUID uuid) {
		return exploitPlayers.getOrDefault(uuid, null);
	}

	public BukkitExploitPlayer get(UUID uuid) {
		BukkitExploitPlayer exploitPlayer;

		if (exploitPlayers.containsKey(uuid)) {
			exploitPlayer = exploitPlayers.get(uuid);
		} else {
			exploitPlayer = new BukkitExploitPlayer(this.plugin, moduleManager, uuid);
			exploitPlayers.put(uuid, exploitPlayer);
		}

		return exploitPlayer;
	}

	public BukkitExploitPlayer get(Player player) {
		return get(player.getUniqueId());
	}

	public void remove(UUID uuid) {
		exploitPlayers.remove(uuid);
	}

	public void remove(Player player) {
		remove(player.getUniqueId());
	}

	public void reload() {
		exploitPlayers.clear();

		for (Player player : server.getOnlinePlayers()) {
			get(player);
		}
	}

	public int getSize() {
		return exploitPlayers.size();
	}

	public int getKicked() {
		return kicked;
	}

	public int addKicked() {
		return kicked++;
	}

	public void clearInventoryItems() {
		// Iterator for closed inventories
		Iterator<BukkitExploitPlayer> iterator = closedInventories.iterator();

		// Iterate
		while (iterator.hasNext()) {
			BukkitExploitPlayer exploitPlayer = iterator.next();
			Player player = exploitPlayer.getPlayer();

			// Check if player is online
			if (exploitPlayer == null || !player.isOnline()) {
				iterator.remove();
			} else {
				// Check if inventory is closed
				if (exploitPlayer.getOpenInventory() == null) {
					// Check if exploitplayer exists
					if (exploitPlayer != null) {
						// Clear his items
						exploitPlayer.clearInventoryItems();
					}

					// Already clared, remove
					iterator.remove();
				}
			}
		}
	}

	public void addClosedInventory(BukkitExploitPlayer bukkitExploitPlayer) {
		closedInventories.add(bukkitExploitPlayer);
	}

    public void removeClosedInventory(BukkitExploitPlayer bukkitExploitPlayer) {
		closedInventories.remove(bukkitExploitPlayer);
    }

	public int getPacketsCancelled() {
		return packetsCancelled;
	}

	public void addPacketsCancelled() {
		packetsCancelled += 1;
	}
}