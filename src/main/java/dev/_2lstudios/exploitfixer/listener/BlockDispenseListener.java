package dev._2lstudios.exploitfixer.listener;

import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.data.BlockData;
import org.bukkit.block.data.Directional;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;

import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.modules.EventsModule;
import dev._2lstudios.exploitfixer.modules.NotificationsModule;

public class BlockDispenseListener implements Listener {
    private final NotificationsModule notificationsModule;
    private final EventsModule eventsModule;

    BlockDispenseListener(final ModuleManager moduleManager) {
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.eventsModule = moduleManager.getEventsModule();
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    public void onBlockDispense(BlockDispenseEvent event) {
        if (eventsModule.isDispenserCrash()) {
            final Block block = event.getBlock();
            final Location location = block.getLocation();
            final World world = location.getWorld();

            if (world != null) {
                final int maxHeight = world.getMaxHeight() - 1;
                final BlockData blockData = block.getState().getBlockData();

                if (blockData instanceof Directional) {
                    final Directional directional = (Directional) blockData;
                    final BlockFace face = directional.getFacing();

                    if ((location.getY() >= maxHeight && face == BlockFace.UP
                            || location.getY() <= 1 && face == BlockFace.DOWN)) {
                        event.setCancelled(true);
                        notificationsModule.debug("[Events] A dispenser tried to drop objects from invalid locations.");
                    }
                }
            }
        }
    }
}
