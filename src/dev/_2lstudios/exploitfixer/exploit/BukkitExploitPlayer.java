package dev._2lstudios.exploitfixer.exploit;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;

import org.bukkit.Server;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.managers.ModuleManager;
import dev._2lstudios.exploitfixer.utils.VersionUtil;
import dev._2lstudios.exploitfixer.modules.IModule;
import dev._2lstudios.exploitfixer.modules.IViolationModule;
import dev._2lstudios.exploitfixer.modules.MessagesModule;
import dev._2lstudios.exploitfixer.modules.NotificationsModule;
import dev._2lstudios.hamsterapi.enums.PacketType;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import dev._2lstudios.hamsterapi.wrappers.PacketWrapper;

public class BukkitExploitPlayer extends ExploitPlayer {
	private final Plugin plugin;
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final NotificationsModule notificationsModule;

	public BukkitExploitPlayer(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
	}

	public void addVls(final Cancellable event, final HamsterPlayer hamsterPlayer,
			final IViolationModule module, final double amount) {
		addVls(event, null, hamsterPlayer, module, amount);
	}

	public void addVls(final Cancellable event, final PacketWrapper packet,
			final HamsterPlayer hamsterPlayer, final IViolationModule module, final double amount) {
		final Violations violations = (Violations) module.getViolations();

		if (violations != null) {
			final Map<IViolationModule, Double> violationsMap = getViolations();
			final long currentTime = System.currentTimeMillis();
			final long lastViolation = getLastViolation();

			if (currentTime - lastViolation >= 1000) {
				clearPunishments();
				setLastViolation(currentTime);

				for (final IViolationModule violationModule : new HashSet<>(violationsMap.keySet())) {
					final double vls = violationsMap.get(violationModule) - violationModule.getReduceVls();

					if (vls <= 0) {
						violationsMap.remove(violationModule);
					} else {
						violationsMap.put(violationModule, vls);
					}
				}
			}

			final double newVls = getViolations(module) + amount;

			violationsMap.put(module, newVls);

			if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
				((Cancellable) event).setCancelled(true);
			}

			for (final int threshold : violations.getViolations()) {
				if (threshold <= newVls) {
					final Collection<String> commands = violations.getCommands(threshold);

					punish(module, hamsterPlayer, packet, commands, (int) newVls);
				}
			}
		}
	}

	public void punish(final IModule module, final HamsterPlayer hamsterPlayer, final PacketWrapper packet,
			final Collection<String> punishments, final int newVls) {
		final Collection<Collection<String>> punishmentsDone = this.getPunishments();

		if (!punishments.isEmpty() && !punishmentsDone.contains(punishments)) {
			final Server server = plugin.getServer();
			final CommandSender consoleSender = server.getConsoleSender();
			final BukkitScheduler scheduler = server.getScheduler();
			final Player player = hamsterPlayer.getPlayer();
			final String playerName = player.getName();

			for (final String punishment : punishments) {
				if (punishment.equals("kick")) {
					final String locale = VersionUtil.getLocale(player);
					final String kickMessage = messagesModule.getKickMessage(module, locale);

					hamsterPlayer.disconnect(kickMessage);
					hamsterPlayer.closeChannel();
				} else if (punishment.equals("notification")) {
					final String moduleName = module.getName();

					if (packet != null) {
						final PacketType packetType = packet.getType();

						if (packetType != null) {
							notificationsModule.sendNotification(packetType.toString(), player, newVls);
						} else {
							notificationsModule.sendNotification(moduleName, player, newVls);
						}
					} else {
						notificationsModule.sendNotification(moduleName, player, newVls);
					}
				} else {
					if (server.isPrimaryThread()) {
						server.dispatchCommand(consoleSender, punishment.replace("%player%", playerName));
					} else {
						scheduler.runTask(plugin, () -> {
							server.dispatchCommand(consoleSender, punishment.replace("%player%", playerName));
						});
					}
				}
			}

			punishmentsDone.add(punishments);
			exploitPlayerManager.addPunishment();
		}
	}
}
