package dev._2lstudios.exploitfixer.modules;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Player;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;

public class NotificationsModule implements INotificationsModule {
    private final Server server;
    private final Logger logger;
    private final Map<String, Integer> packetDebug = new HashMap<>();
    private final Collection<String> notifications = new HashSet<>();
    private boolean enabled, debug;
    private String message;

    public NotificationsModule(final Server server, final Logger logger) {
        this.server = server;
        this.logger = logger;
    }

    public String getMessage() {
        return message;
    }

    public void reload(final IConfiguration configYml) {
        this.enabled = configYml.getBoolean("notifications.enabled");
        this.debug = configYml.getBoolean("notifications.debug");
        this.message = configYml.getString("notifications.message").replace('&', '\u00A7');
    }

    @Override
    public boolean isEnabled() {
        return this.enabled;
    }

    public void addPacketDebug(final String packetType) {
        if (this.debug) {
            packetDebug.put(packetType, packetDebug.getOrDefault(packetType, 0) + 1);
        }
    }

    public void debugPackets() {
        if (this.debug && !packetDebug.isEmpty()) {
            final Set<Entry<String, Integer>> entries = new HashSet<>(packetDebug.entrySet());
            final StringBuilder stringBuilder = new StringBuilder("Received Packets (x%total%): ");
            boolean isFirst = true;
            int total = 0;

            packetDebug.clear();

            for (final Entry<String, Integer> packetEntry : entries) {
                final String packetType = packetEntry.getKey();
                final int amount = packetEntry.getValue();

                if (isFirst) {
                    isFirst = false;
                } else {
                    stringBuilder.append(", ");
                }

                stringBuilder.append("x").append(amount).append(" ").append(packetType);
                total += amount;
            }

            debug(stringBuilder.toString().replace("%total%", String.valueOf(total)));
        }
    }

    public void debug(final String message) {
        if (this.debug) {
            this.logger.info(message);
        }
    }

    public final void setNotifications(final String playerName, final boolean input) {
        if (input) {
            notifications.add(playerName);
        } else {
            notifications.remove(playerName);
        }
    }

    public final boolean isNotifications(final String playerName) {
        return notifications.contains(playerName);
    }

    public final boolean isDebug() {
        return debug;
    }

    public final Collection<String> getNotifications() {
        return notifications;
    }

	public void sendNotification(final String check, final Player exploiterPlayer, final int violations) {
		if (isEnabled() && exploiterPlayer != null) {
			final int ping = getPing(exploiterPlayer);
			final String notification = getMessage().replace("%player%", exploiterPlayer.getName()).replace("%check%", check)
					.replace("%ping%", String.valueOf(ping)).replace("%vls%", String.valueOf(violations));
            final ConsoleCommandSender console = server.getConsoleSender();
            
			console.sendMessage(notification);

			for (final String notificationPlayerName : getNotifications()) {
				final Player notificationPlayer = server.getPlayer(notificationPlayerName);

				if (notificationPlayer != null) {
					notificationPlayer.sendMessage(notification);
				}
			}
		}
	}

	private int getPing(final Player player) {
		try {
			final Object playerHandle = player.getClass().getMethod("getHandle").invoke(player);

			return (int) playerHandle.getClass().getField("ping").get(playerHandle);
		} catch (final Exception ignored) {
			return 0;
		}
	}

    @Override
    public String getName() {
        return "Notifications";
    }
}